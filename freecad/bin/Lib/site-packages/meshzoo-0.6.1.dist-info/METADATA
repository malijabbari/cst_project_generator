Metadata-Version: 2.1
Name: meshzoo
Version: 0.6.1
Summary: Collection of explicitly constructed meshes
Home-page: https://github.com/nschloe/meshzoo
Author: Nico Schlömer
Author-email: nico.schloemer@gmail.com
License: GPLv3
Project-URL: Code, https://github.com/nschloe/meshzoo
Project-URL: Issues, https://github.com/nschloe/meshzoo/issues
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Topic :: Scientific/Engineering
Classifier: Topic :: Scientific/Engineering :: Mathematics
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: numpy
Requires-Dist: importlib-metadata ; python_version < "3.8"
Provides-Extra: all
Requires-Dist: matplotlib ; extra == 'all'
Provides-Extra: plot
Requires-Dist: matplotlib ; extra == 'plot'

# meshzoo

[![gh-actions](https://img.shields.io/github/workflow/status/nschloe/meshzoo/ci?style=flat-square)](https://github.com/nschloe/meshzoo/actions?query=workflow%3Aci)
[![codecov](https://img.shields.io/codecov/c/github/nschloe/meshzoo.svg?style=flat-square)](https://codecov.io/gh/nschloe/meshzoo)
[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg?style=flat-square)](https://github.com/psf/black)
[![PyPI pyversions](https://img.shields.io/pypi/pyversions/meshzoo.svg?style=flat-square)](https://pypi.org/pypi/meshzoo/)
[![PyPi Version](https://img.shields.io/pypi/v/meshzoo.svg?style=flat-square)](https://pypi.org/project/meshzoo)
[![GitHub stars](https://img.shields.io/github/stars/nschloe/meshzoo.svg?style=flat-square&logo=github&label=Stars&logoColor=white)](https://github.com/nschloe/meshzoo)
[![PyPi downloads](https://img.shields.io/pypi/dm/meshzoo.svg?style=flat-square)](https://pypistats.org/packages/meshzoo)

When generating meshes for FEM/FVM computations, sometimes your geometry is so simple
that you don't need a complex mesh generator (like
[pygmsh](https://github.com/nschloe/pygmsh/),
[MeshPy](https://github.com/inducer/meshpy),
[mshr](https://bitbucket.org/fenics-project/mshr),
[pygalmesh](https://github.com/nschloe/pygalmesh/),
[dmsh](https://github.com/nschloe/dmsh/)),
but something simple and fast that makes use of the structure of the domain. Enter
meshzoo.

### Examples

#### Triangle
<img src="https://nschloe.github.io/meshzoo/triangle.svg" width="20%">

```python
import meshzoo
bary, cells = meshzoo.triangle(8)

# corners = numpy.array(
#     [
#         [0.0, -0.5 * numpy.sqrt(3.0), +0.5 * numpy.sqrt(3.0)],
#         [1.0, -0.5, -0.5],
#     ]
# )
# points = numpy.dot(corners, bary).T

# Process the mesh, e.g., write it to a file using meshio
# meshio.write_points_cells("triangle.vtk", points, {"triangle": cells})
```

#### Rectangle
<img src="https://nschloe.github.io/meshzoo/rectangle.svg" width="20%">

```python
points, cells = meshzoo.rectangle(
    xmin=0.0, xmax=1.0,
    ymin=0.0, ymax=1.0,
    nx=11, ny=11,
    variant="zigzag"   # "up", "down", "center"
)
```

#### Regular polygon
| <img src="https://nschloe.github.io/meshzoo/4gon.svg" width="70%"> | <img src="https://nschloe.github.io/meshzoo/6gon.svg" width="70%"> | <img src="https://nschloe.github.io/meshzoo/9gon.svg" width="70%"> |
| :----: | :---: | :---: |
|`meshzoo.ngon(4, 8)` | `meshzoo.ngon(6, 8)` | `meshzoo.ngon(9, 8)` |

```python
points, cells = meshzoo.ngon(5, 11)
```

#### Disk
| <img src="https://nschloe.github.io/meshzoo/4gon_disk.svg" width="70%"> | <img src="https://nschloe.github.io/meshzoo/6gon_disk.svg" width="70%"> | <img src="https://nschloe.github.io/meshzoo/9gon_disk.svg" width="70%"> |
| :----: | :---: | :---: |
|`meshzoo.disk(4, 8)` | `meshzoo.disk(6, 8)` | `meshzoo.disk(9, 8)` |

The disk meshes are inflations of regular polygons.

```python
points, cells = meshzoo.ngon_disk(6, 11)
```

#### Möbius strip
<img src="https://nschloe.github.io/meshzoo/moebius.png" width="20%">

```python
points, cells = meshzoo.moebius(num_twists=1, nl=60, nw=11)
```

#### Sphere (surface)
<img src="https://nschloe.github.io/meshzoo/uv_sphere.png" width="20%">

```python
points, cells = meshzoo.uv_sphere(num_points_per_circle=20, num_circles=10, radius=1.0)
```

Spheres can also be generated by refining the faces of [platonic
solids](https://en.wikipedia.org/wiki/Platonic_solid) and then "inflating" them. meshzoo
implements a few of them. The sphere generated from the icosahedron has the
highest-quality (most equilateral) triangles.

| <img src="https://nschloe.github.io/meshzoo/tetra-sphere.png" width="70%"> | <img src="https://nschloe.github.io/meshzoo/octa-sphere.png" width="70%"> | <img src="https://nschloe.github.io/meshzoo/icosa-sphere.png" width="70%"> |
| :----: | :---: | :---: |
|`meshzoo.tetra_sphere(10)` | `meshzoo.octa_sphere(10)` | `meshzoo.icosa_sphere(10)` |


#### Tube
<img src="https://nschloe.github.io/meshzoo/tube.png" width="20%">

```python
points, cells = meshzoo.tube(length=1.0, radius=1.0, n=30)
```

#### Cube
<img src="https://nschloe.github.io/meshzoo/cube.png" width="20%">

```python
points, cells = meshzoo.cube(
    xmin=0.0, xmax=1.0,
    ymin=0.0, ymax=1.0,
    zmin=0.0, zmax=1.0,
    nx=11, ny=11, nz=11
)
```


### Extra, extra

In addition to this, the
[`examples/`](https://github.com/nschloe/meshzoo/blob/master/examples/) directory
contains a couple of instructive examples for other mesh generators.


### Installation

meshzoo is [available from the Python Package
Index](https://pypi.org/project/meshzoo/), so simply do
```
pip install meshzoo
```
to install.

### Testing

To run the meshzoo unit tests, check out this repository and run
```
pytest
```

### License

meshzoo is published under the [MIT license](https://en.wikipedia.org/wiki/MIT_License).


